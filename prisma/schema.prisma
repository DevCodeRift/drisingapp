generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String            @id @default(cuid())
  name          String?
  email         String?           @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime          @default(now())
  accounts      Account[]
  builds        Build[]
  clanPosts     ClanRecruitment[]
  comments      Comment[]
  lfgPosts      LFGPost[]
  news          News[]
  sessions      Session[]
  achievements  UserAchievement[]
  profile       UserProfile?
  tasks         UserTask[]
  votes         Vote[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model TaskTemplate {
  id          String       @id @default(cuid())
  title       String
  description String?
  category    TaskCategory
  resetType   ResetType
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  userTasks   UserTask[]
}

model UserTask {
  id             String       @id @default(cuid())
  userId         String
  taskTemplateId String
  completed      Boolean      @default(false)
  completedAt    DateTime?
  resetAt        DateTime?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  taskTemplate   TaskTemplate @relation(fields: [taskTemplateId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, taskTemplateId])
}

model Character {
  id                String                         @id @default(cuid())
  name              String                         @unique
  description       String?
  imageUrl          String?
  createdAt         DateTime                       @default(now())
  updatedAt         DateTime                       @updatedAt
  builds            Build[]
  compatibleWeapons WeaponCharacterCompatibility[]
}

model Build {
  id          String    @id @default(cuid())
  title       String
  description String
  characterId String
  userId      String
  content     String    // Legacy field, can store additional notes
  isPublic    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  voteCount   Int       @default(0)
  character   Character @relation(fields: [characterId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  comments    Comment[]
  votes       Vote[]
  artifacts   BuildArtifact[]
  weapons     BuildWeapon[]

  @@index([characterId])
  @@index([voteCount])
  @@index([isPublic])
}

// Build Artifacts (4 per build)
model BuildArtifact {
  id               String   @id @default(cuid())
  buildId          String
  slot             Int      // 1-4
  artifactName     String   // e.g., "abundant-planetesimal"
  rarity           String   // Rare, Legendary, Mythic, Exotic
  power            Int?
  gearLevel        Int?
  enhancementLevel Int?
  createdAt        DateTime @default(now())

  build      Build                    @relation(fields: [buildId], references: [id], onDelete: Cascade)
  attributes BuildArtifactAttribute[]

  @@index([buildId])
}

// Artifact Attributes (3-4 per artifact)
model BuildArtifactAttribute {
  id          String   @id @default(cuid())
  artifactId  String
  name        String   // Free text
  description String?  // Free text
  createdAt   DateTime @default(now())

  artifact BuildArtifact @relation(fields: [artifactId], references: [id], onDelete: Cascade)

  @@index([artifactId])
}

// Build Weapons (Primary + Power)
model BuildWeapon {
  id               String  @id @default(cuid())
  buildId          String
  weaponId         String? // Reference to base weapon (optional)
  slot             String  // "Primary" or "Power"
  customName       String? // Override weapon name
  gearLevel        Int?
  enhancementLevel Int?
  createdAt        DateTime @default(now())

  build     Build                  @relation(fields: [buildId], references: [id], onDelete: Cascade)
  weapon    Weapon?                @relation(fields: [weaponId], references: [id], onDelete: SetNull)
  traits    BuildWeaponTrait[]
  perks     BuildWeaponPerk[]
  catalysts BuildWeaponCatalyst[]
  mods      BuildWeaponMod[]

  @@index([buildId])
  @@index([weaponId])
}

// Custom Traits for Build Weapons
model BuildWeaponTrait {
  id          String  @id @default(cuid())
  weaponId    String
  name        String
  description String?
  effect      String?
  createdAt   DateTime @default(now())

  weapon BuildWeapon @relation(fields: [weaponId], references: [id], onDelete: Cascade)

  @@index([weaponId])
}

// Custom Perks for Build Weapons
model BuildWeaponPerk {
  id          String  @id @default(cuid())
  weaponId    String
  name        String
  description String?
  effect      String?
  createdAt   DateTime @default(now())

  weapon BuildWeapon @relation(fields: [weaponId], references: [id], onDelete: Cascade)

  @@index([weaponId])
}

// Custom Catalysts for Build Weapons
model BuildWeaponCatalyst {
  id          String  @id @default(cuid())
  weaponId    String
  name        String
  description String?
  effect      String?
  createdAt   DateTime @default(now())

  weapon BuildWeapon @relation(fields: [weaponId], references: [id], onDelete: Cascade)

  @@index([weaponId])
}

// Custom Mods for Build Weapons (only for non-Exotic weapons)
model BuildWeaponMod {
  id          String  @id @default(cuid())
  weaponId    String
  name        String
  description String?
  effect      String?
  createdAt   DateTime @default(now())

  weapon BuildWeapon @relation(fields: [weaponId], references: [id], onDelete: Cascade)

  @@index([weaponId])
}

model News {
  id        String    @id @default(cuid())
  title     String
  content   String
  type      NewsType  @default(ARTICLE)
  url       String?
  userId    String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  voteCount Int       @default(0)
  comments  Comment[]
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  votes     Vote[]

  @@index([voteCount])
}

model LFGPost {
  id          String    @id @default(cuid())
  activity    String
  description String
  playerCount Int
  userId      String
  active      Boolean   @default(true)
  createdAt   DateTime  @default(now())
  expiresAt   DateTime?
  region      String?
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([active])
  @@index([createdAt])
}

model ClanRecruitment {
  id           String   @id @default(cuid())
  clanName     String
  description  String
  requirements String?
  contactInfo  String
  userId       String
  active       Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([active])
}

model Vote {
  id        String   @id @default(cuid())
  userId    String
  buildId   String?
  newsId    String?
  value     Int
  createdAt DateTime @default(now())
  build     Build?   @relation(fields: [buildId], references: [id], onDelete: Cascade)
  news      News?    @relation(fields: [newsId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, buildId])
  @@unique([userId, newsId])
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  userId    String
  buildId   String?
  newsId    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  build     Build?   @relation(fields: [buildId], references: [id], onDelete: Cascade)
  news      News?    @relation(fields: [newsId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([buildId])
  @@index([newsId])
}

model Achievement {
  id               String            @id @default(cuid())
  key              String            @unique
  name             String
  description      String
  icon             String?
  createdAt        DateTime          @default(now())
  userAchievements UserAchievement[]
}

model UserAchievement {
  id            String      @id @default(cuid())
  userId        String
  achievementId String
  earnedAt      DateTime    @default(now())
  achievement   Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, achievementId])
}

model UserProfile {
  id           String   @id @default(cuid())
  userId       String   @unique
  displayTitle String?
  nameEffect   String?
  customColor  String?
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Weapon {
  id                   String                         @id @default(cuid())
  name                 String
  slug                 String                         @unique
  rarity               Int
  weaponType           String
  basePower            Int
  combatStyle          String
  element              String
  slot                 String
  imageUrl             String?
  dps                  Int?
  precisionBonus       Float?
  magazineCap          Int?
  rateOfFire           Int?
  maxAmmo              Int?
  damage               Int?
  reloadSpeed          Int?
  stability            Int?
  handling             Int?
  range                Int?
  createdAt            DateTime                       @default(now())
  updatedAt            DateTime                       @updatedAt
  catalysts            WeaponCatalyst[]
  compatibleCharacters WeaponCharacterCompatibility[]
  mods                 WeaponModAssignment[]
  perks                WeaponPerkAssignment[]
  traits               WeaponTrait[]
  buildWeapons         BuildWeapon[]

  @@index([weaponType])
  @@index([element])
  @@index([rarity])
}

model Trait {
  id          String        @id @default(cuid())
  name        String        @unique
  type        String
  description String?
  effect      String?
  iconUrl     String?
  createdAt   DateTime      @default(now())
  weapons     WeaponTrait[]

  @@index([type])
}

model WeaponTrait {
  id        String   @id @default(cuid())
  weaponId  String
  traitId   String
  slot      Int
  createdAt DateTime @default(now())
  trait     Trait    @relation(fields: [traitId], references: [id], onDelete: Cascade)
  weapon    Weapon   @relation(fields: [weaponId], references: [id], onDelete: Cascade)

  @@unique([weaponId, slot])
  @@index([weaponId])
  @@index([traitId])
}

model Perk {
  id          String                 @id @default(cuid())
  name        String                 @unique
  slot        Int
  description String?
  effect      String?
  iconUrl     String?
  createdAt   DateTime               @default(now())
  modUpgrades ModPerkUpgrade[]
  weapons     WeaponPerkAssignment[]

  @@index([slot])
}

model WeaponPerkAssignment {
  id        String   @id @default(cuid())
  weaponId  String
  perkId    String
  slot      Int
  createdAt DateTime @default(now())
  perk      Perk     @relation(fields: [perkId], references: [id], onDelete: Cascade)
  weapon    Weapon   @relation(fields: [weaponId], references: [id], onDelete: Cascade)

  @@unique([weaponId, slot])
  @@index([weaponId])
  @@index([perkId])
}

model Catalyst {
  id                     String           @id @default(cuid())
  name                   String           @unique
  description            String?
  effect                 String?
  requirementDescription String?
  iconUrl                String?
  createdAt              DateTime         @default(now())
  weapons                WeaponCatalyst[]
}

model WeaponCatalyst {
  id         String   @id @default(cuid())
  weaponId   String
  catalystId String
  createdAt  DateTime @default(now())
  catalyst   Catalyst @relation(fields: [catalystId], references: [id], onDelete: Cascade)
  weapon     Weapon   @relation(fields: [weaponId], references: [id], onDelete: Cascade)

  @@unique([weaponId, catalystId])
  @@index([weaponId])
}

model ModRarity {
  id                   String      @id @default(cuid())
  name                 String      @unique
  mainAttributeCount   Int         @default(1)
  randomAttributeCount Int         @default(0)
  colorCode            String?
  mods                 WeaponMod[]
}

model ModAttribute {
  id           String               @id @default(cuid())
  name         String
  description  String?
  minStatBonus String?
  maxStatBonus String?
  createdAt    DateTime             @default(now())
  mainMods     ModMainAttribute[]
  randomMods   ModRandomAttribute[]
}

model WeaponMod {
  id                     String                @id @default(cuid())
  name                   String
  category               String
  rarityId               String?
  description            String?
  combatStyle            String?
  unlocksPerkUpgrade     Boolean               @default(false)
  perkUpgradeDescription String?
  iconUrl                String?
  createdAt              DateTime              @default(now())
  mainAttributes         ModMainAttribute[]
  perkUpgrades           ModPerkUpgrade[]
  randomAttributes       ModRandomAttribute[]
  rarity                 ModRarity?            @relation(fields: [rarityId], references: [id])
  weapons                WeaponModAssignment[]

  @@index([category])
  @@index([rarityId])
  @@index([combatStyle])
}

model ModMainAttribute {
  id          String       @id @default(cuid())
  modId       String
  attributeId String
  createdAt   DateTime     @default(now())
  attribute   ModAttribute @relation(fields: [attributeId], references: [id], onDelete: Cascade)
  mod         WeaponMod    @relation(fields: [modId], references: [id], onDelete: Cascade)

  @@index([modId])
}

model ModRandomAttribute {
  id          String       @id @default(cuid())
  modId       String
  attributeId String
  createdAt   DateTime     @default(now())
  attribute   ModAttribute @relation(fields: [attributeId], references: [id], onDelete: Cascade)
  mod         WeaponMod    @relation(fields: [modId], references: [id], onDelete: Cascade)

  @@index([modId])
}

model ModPerkUpgrade {
  id                 String    @id @default(cuid())
  modId              String
  perkId             String
  upgradeDescription String?
  createdAt          DateTime  @default(now())
  mod                WeaponMod @relation(fields: [modId], references: [id], onDelete: Cascade)
  perk               Perk      @relation(fields: [perkId], references: [id], onDelete: Cascade)

  @@index([modId])
  @@index([perkId])
}

model WeaponModAssignment {
  id           String    @id @default(cuid())
  weaponId     String
  modId        String
  slotCategory String
  displayOrder Int       @default(0)
  createdAt    DateTime  @default(now())
  mod          WeaponMod @relation(fields: [modId], references: [id], onDelete: Cascade)
  weapon       Weapon    @relation(fields: [weaponId], references: [id], onDelete: Cascade)

  @@index([weaponId])
  @@index([modId])
}

model WeaponCharacterCompatibility {
  id          String    @id @default(cuid())
  weaponId    String
  characterId String
  createdAt   DateTime  @default(now())
  character   Character @relation(fields: [characterId], references: [id], onDelete: Cascade)
  weapon      Weapon    @relation(fields: [weaponId], references: [id], onDelete: Cascade)

  @@unique([weaponId, characterId])
  @@index([weaponId])
  @@index([characterId])
}

enum TaskCategory {
  DAILY
  WEEKLY
  MONTHLY
  SEASONAL
}

enum ResetType {
  DAILY_2AM_UTC
  WEEKLY_MONDAY
  WEEKLY_FRIDAY
  MONTHLY
  SEASONAL
  TIME_LIMITED_FRI_TO_MON
}

enum NewsType {
  ARTICLE
  VIDEO
  GUIDE
  OTHER
}
